version: '3.8'
services:
    # MLflow Server with health check

  mlflow_server:
    build: ./mlflow_server
    container_name: mlflow_server
    command: >
      sh -c "
      echo 'Waiting for database...' &&
      sleep 20 &&
      mlflow server
      --backend-store-uri postgresql://mlflow:mlflow@db:5432/mlflow
      --default-artifact-root s3://mlflow/
      --host 0.0.0.0
      --port 5001
      "
    environment:
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    depends_on:
      - db
      - minio
    ports:
      - "5001:5001"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5001/api/2.0/mlflow/experiments/list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 120s
      

  # Database with health check
  db:
    image: postgres:13
    container_name: mlflow_db
    environment:
      - POSTGRES_USER=mlflow
      - POSTGRES_PASSWORD=mlflow
      - POSTGRES_DB=mlflow
    volumes:
      - mlflow_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Model trainer with proper dependency
  model_tourism_trainer:
    build: ./modelbaru
    container_name: model_tourism_trainer
    command: "sh -c 'python generate_dummy_pickle.py && python register_model.py'"
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow_server:5001
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    depends_on:
      mlflow_server:
        condition: service_healthy  # ✅ Wait for health check
    volumes:
      - ./modelbaru:/app
    restart: "no"  # ✅ Don't restart on completion
  # FastAPI App
  fastapi_tourism_app:
    build: ./fastapibaru
    container_name: fastapi_tourism_app
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow_server:5001
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    depends_on:
      - mlflow_server
      - model_tourism_trainer
    ports:
      - "8101:8000"


  # MinIO sebagai S3 bucket
  minio:
    image: minio/minio
    container_name: mlflow_minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    entrypoint: >
      sh -c "mkdir -p /data/mlflow && minio server /data --console-address ':9001'"
    volumes:
      - mlflow_minio_data:/data

  # FastAPI untuk model Iris
  # fastapi_app:
  #   build: ./app
  #   container_name: fastapi_app
  #   environment:
  #     - MLFLOW_TRACKING_URI=http://mlflow_server:5001
  #     - AWS_ACCESS_KEY_ID=minioadmin
  #     - AWS_SECRET_ACCESS_KEY=minioadmin
  #     - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
  #   depends_on:
  #     - mlflow_server
  #   ports:
  #     - "8100:8000"

  # # Model trainer untuk Iris
  # model_trainer:
  #   container_name: model_trainer
  #   build:
  #     context: ./model
  #   environment:
  #     - MLFLOW_TRACKING_URI=http://mlflow_server:5001
  #     - AWS_ACCESS_KEY_ID=minioadmin
  #     - AWS_SECRET_ACCESS_KEY=minioadmin
  #     - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
  #   depends_on:
  #     - db
  #     - minio


  # Prometheus
  prometheus_server:
    image: prom/prometheus:v2.45.0
    container_name: prometheus_server
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - fastapi_tourism_app
    ports:
      - "9090:9090"

  # Grafana
  grafana_server:
    image: grafana/grafana:9.5.3
    container_name: grafana_server
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus_server
    ports:
      - "3000:3000"

  # NGINX Reverse Proxy (Hanya ini yang expose port ke localhost)
  nginx_load_balancer:
    image: nginx:alpine
    container_name: nginx_load_balancer
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      # - fastapi_app
      - fastapi_tourism_app
      - mlflow_server
      - grafana_server
      - prometheus_server
      - minio

volumes:
  mlflow_db_data:
  mlflow_minio_data:
  prometheus_data:
  grafana_data:
